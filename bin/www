#!/usr/bin/env node

/**
 * Módulo para iniciar el servidor
 */

// Cargar variables de entorno primero
require('dotenv').config();
const app = require('../app');
const http = require('http');

/**
 * Obtener puerto del entorno y almacenar en Express.
 */

const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Crear servidor HTTP.
 */

const server = http.createServer(app);

/**
 * Escuchar en el puerto proporcionado, en todas las interfaces de red.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalizar un puerto en un número, string, o false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // pipe named
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Manejador de eventos para el evento "error" del servidor HTTP.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // manejar errores específicos con mensajes amigables
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requiere privilegios elevados');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' ya está en uso');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Manejador de eventos para el evento "listening" del servidor HTTP.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'puerto ' + addr.port;
  console.log(`Servidor iniciado correctamente en http://localhost:${addr.port}`);
}
